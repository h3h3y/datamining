========================================================================
# file csv imunotherapi kedua nya sama saja isinya

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.tree import DecisionTreeClassifier, plot_tree

# 2. Upload dan baca data
file_path = r'D:\data science\uas\imunotherapi.csv'  # Sesuaikan dengan lokasi file Anda
df = pd.read_csv(file_path)

# 3. Tampilkan deskripsi, struktur data, dan 5 data teratas
print(df.info())
print(df.describe())
print(df.head())

# 4. Lakukan pengecekan data
print("\nJumlah nilai yang hilang:")
print(df.isnull().sum())

# Hapus data dengan nilai kosong pada target
print("\nMenghapus baris dengan nilai kosong...")
df_cleaned = df.dropna(subset=['Result_of_Treatment'])
print(df_cleaned.isnull().sum())

# 5. Analisis EDA dengan grafik
plt.figure(figsize=(6, 4))
sns.countplot(x='Result_of_Treatment', data=df_cleaned, palette='coolwarm')
plt.title('Distribusi Hasil Pengobatan')
plt.xlabel('Hasil Pengobatan (0: Tidak berhasil, 1: Berhasil)')
plt.ylabel('Jumlah')
plt.show()

# Visualisasi hubungan antara usia dan hasil pengobatan
plt.figure(figsize=(8, 5))
sns.boxplot(x='Result_of_Treatment', y='age', data=df_cleaned, palette='coolwarm')
plt.title('Distribusi Usia berdasarkan Hasil Pengobatan')
plt.xlabel('Hasil Pengobatan')
plt.ylabel('Usia')
plt.show()

# 6. Analisis korelasi
plt.figure(figsize=(10, 6))
sns.heatmap(df_cleaned.corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Heatmap Korelasi Antar Variabel')
plt.show()

# 7. Model Naive Bayes
X = df_cleaned.drop(columns=['Result_of_Treatment'])
y = df_cleaned['Result_of_Treatment']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model_nb = GaussianNB()
model_nb.fit(X_train, y_train)

y_pred = model_nb.predict(X_test)

# Evaluasi model
print("\nAkurasi Model Naive Bayes:", accuracy_score(y_test, y_pred))
print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred))
print("\nConfusion Matrix:")
print(confusion_matrix(y_test, y_pred))

# 8. Visualisasi model naive bayes
plt.figure(figsize=(8, 5))
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, cmap='coolwarm', fmt='d')
plt.title("Confusion Matrix Naive Bayes")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

# 9. Tampilkan grafik dari naive bayes
plt.figure(figsize=(8, 5))
probabilities = model_nb.predict_proba(X_test)
sns.histplot(probabilities[:, 1], bins=10, kde=True, color='blue')
plt.title("Distribusi Probabilitas Prediksi Naive Bayes")
plt.xlabel("Probabilitas Prediksi Kelas 1")
plt.ylabel("Frekuensi")
plt.show()
========================================================================


========================================================================
# file csv diabetes yang ini

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.tree import DecisionTreeClassifier, plot_tree

# 2. Upload dan baca data
file_path = r'D:\data science\uas\diabetes.csv'  # Sesuaikan dengan lokasi file Anda
df = pd.read_csv(file_path)

# 3. Tampilkan deskripsi, struktur data, dan 5 data teratas
print(df.info())
print(df.describe())
print(df.head())

# 4. Lakukan pengecekan data
print("\nJumlah nilai yang hilang:")
print(df.isnull().sum())

# Hapus data dengan nilai kosong pada target
print("\nMenghapus baris dengan nilai kosong...")
df_cleaned = df.dropna(subset=['Outcome'])
print(df_cleaned.isnull().sum())

# 5. Analisis EDA dengan grafik
plt.figure(figsize=(6, 4))
sns.countplot(x='Outcome', data=df_cleaned, palette='coolwarm')
plt.title('Distribusi Hasil Diabetes')
plt.xlabel('Hasil Diabetes (0: Tidak, 1: Ya)')
plt.ylabel('Jumlah')
plt.show()

# Visualisasi hubungan antara usia dan hasil diabetes
plt.figure(figsize=(8, 5))
sns.boxplot(x='Outcome', y='Age', data=df_cleaned, palette='coolwarm')
plt.title('Distribusi Usia berdasarkan Hasil Diabetes')
plt.xlabel('Hasil Diabetes')
plt.ylabel('Usia')
plt.show()

# 6. Analisis korelasi
plt.figure(figsize=(10, 6))
sns.heatmap(df_cleaned.corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Heatmap Korelasi Antar Variabel')
plt.show()

# 7. Model Naive Bayes
X = df_cleaned.drop(columns=['Outcome'])
y = df_cleaned['Outcome']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model_nb = GaussianNB()
model_nb.fit(X_train, y_train)

y_pred = model_nb.predict(X_test)

# Evaluasi model
print("\nAkurasi Model Naive Bayes:", accuracy_score(y_test, y_pred))
print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred))
print("\nConfusion Matrix:")
print(confusion_matrix(y_test, y_pred))

# 8. Visualisasi model naive bayes
plt.figure(figsize=(8, 5))
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, cmap='coolwarm', fmt='d')
plt.title("Confusion Matrix Naive Bayes")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

# 9. Tampilkan grafik dari naive bayes
plt.figure(figsize=(8, 5))
probabilities = model_nb.predict_proba(X_test)
sns.histplot(probabilities[:, 1], bins=10, kde=True, color='blue')
plt.title("Distribusi Probabilitas Prediksi Naive Bayes")
plt.xlabel("Probabilitas Prediksi Kelas 1")
plt.ylabel("Frekuensi")
plt.show()
========================================================================
